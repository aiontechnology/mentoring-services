# Copyright 2020 Aion Technology LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

openapi: 3.0.1
info:
  title: Mentor Success API
  description: API for the Mentor Success application
  contact:
    email: whitney@aiontechnology.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: "1.0.0"
servers:
  - url: "https://ve17iw2h0g.execute-api.us-west-2.amazonaws.com/{basePath}"
    variables:
      basePath:
        default: "/test"
tags:
  - name: person
    description: Person Management
  - name: personnel
    description: School Personnel Management
  - name: programAdmin
    description: School Program Admin Management
  - name: school
    description: School Management
  - name: teacher
    description: Teacher Management
paths:

  # People
  /api/v1/people:
    options:
      tags:
        - person
      responses:
        200:
          description: Success
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    post:
      summary: Add a person
      description: Add a person to the system
      tags:
        - person
      operationId: createPerson
      requestBody:
        description: Person to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonModel'
      responses:
        201:
          description: The person was created
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonResultModel'
          links:
            self:
              operationId: getPerson
              parameters:
                personId: '$response.body#/id'
              description: >
                The `id` value returned in the response can be used as the
                `personId` parameter in `GET /people/{personId}`.
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/people"
        responses:
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "POST"
        type: "http"
  /api/v1/people/{personId}:
    parameters:
      - in: path
        name: personId
        schema:
          type: string
          format: uuid
        required: true
        description: The id of the desired person
    options:
      tags:
        - person
      responses:
        200:
          description: Success
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    get:
      summary: Get a person
      description: Get a person by id
      tags:
        - person
      operationId: getPerson
      responses:
        "200":
          description: Found the requested person
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/people"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "GET"
        type: "http"

  # School - Personnel
  /api/v1/schools/{schoolId}/personnel:
    parameters:
      - in: path
        name: schoolId
        schema:
          type: string
          format: uuid
        required: true
        description: The id of the desired school
    options:
      tags:
        - personnel
        - school
      responses:
        200:
          description: Success
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    post:
      summary: Add personnel
      description: Add personnel to a school
      tags:
        - personnel
        - school
      operationId: createPersonnel
      requestBody:
        description: Personnel to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonnelModel'
      responses:
        "201":
          description: The personnel was created
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonnelResultModel'
          links:
            self:
              operationId: getPersonnel
              parameters:
                personnelId: '$response.body/#id'
              description: >
                The `id` value returned in the response can be used as the
                `personnelId` parameter in `GET /personnel/{personnelId}
            school:
              operationId: getSchool
        "400":
          description: The Requested school was not found
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/schools/{schoolId}"
        responses:
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.path.schoolId: "method.request.path.schoolId"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "POST"
        type: "http"
    get:
      summary: Get all personnel
      description: Get all personnel for a school (not including teachers)
      tags:
        - personnel
        - school
      operationId: getAllPersonnel
      responses:
        "200":
          description: A collection of personnel for the school
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonnelCollection'
        "400":
          description: The Requested school was not found
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/schools/{schoolId}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.path.schoolId: "method.request.path.schoolId"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "GET"
        type: "http"
  /api/v1/schools/{schoolId}/personnel/{personnelId}:
    parameters:
      - in: path
        name: schoolId
        schema:
          type: string
          format: uuid
        required: true
        description: The id of the desired school
      - in: path
        name: personnelId
        schema:
          type: string
          format: uuid
        required: true
        description: The id of the desired personnel
    options:
      tags:
        - personnel
        - school
      responses:
        200:
          description: Success
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    get:
      summary: Get a personnel
      description: Get a particular personnel by id
      tags:
        - personnel
        - school
      operationId: getPersonnel
      responses:
        "200":
          description: The personnel was returned
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonnelResultModel'
          links:
            self:
              operationId: getPersonnel
              parameters:
                schoolId: '$request.path.schoolId'
                personnelId: '$request.path.personnelId'
              description: >
                The `Personnel` object can be retrieved by doing a `GET`
                to the current URL
            school:
              $ref: '#/components/links/school'
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/schools/{schoolId}/personnel/{personnelId}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.path.schoolId: "method.request.path.schoolId"
          integration.request.path.personnelId: "method.request.path.personnelId"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "GET"
        type: "http"
    delete:
      summary: Disable personnel
      description: Disable a personnel record
      tags:
        - personnel
        - school
      operationId: deactivatePersonnel
      responses:
        "204":
          description: The personnel record was deleted
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/schools/{schoolId}/personnel/{personnelId}"
        responses:
          default:
            statusCode: "204"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.path.schoolId: "method.request.path.schoolId"
          integration.request.path.personnelId: "method.request.path.personnelId"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "DELETE"
        type: "http"

  # School - ProgramAdmin
  /api/v1/schools/{schoolId}/programAdmins:
    parameters:
      - in: path
        name: schoolId
        schema:
          type: string
          format: uuid
        required: true
        description: The id of the desired school
    options:
      tags:
        - programAdmin
        - school
      responses:
        200:
          description: Success
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    post:
      summary: Add a program administrator
      description: Add a new program administrator
      tags:
        - programAdmin
        - school
      operationId: createProgramAdmin
      responses:
        "201":
          description: The program administrator was created
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramAdminModel'
        "400":
          description: The Requested school was not found
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/schools/{schoolId}/programAdmins"
        responses:
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.path.schoolId: "method.request.path.schoolId"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "POST"
        type: "http"
    get:
      summary: Get all program admins
      description: Get an array of all program admins for a school
      tags:
        - programAdmin
        - school
      operationId: getProgramAdmins
      responses:
        "200":
          description: A collection of program administrators for a school
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramAdminModelCollection'
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/schools/{schoolId}/programAdmins"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.path.schoolId: "method.request.path.schoolId"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "GET"
        type: "http"

  # Schools
  /api/v1/schools:
    options:
      tags:
        - school
      responses:
        200:
          description: Success
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    post:
      summary: Create a new school
      description: Create a new school within the system
      tags:
        - school
      operationId: createSchool
      responses:
        "201":
          description: A new school was created
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchoolModel'
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/schools"
        responses:
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "POST"
        type: "http"
    get:
      summary: Get all schools
      description: Get a collection of all schools
      tags:
        - school
      operationId: getAllSchools
      responses:
        "200":
          description: A collection of all schools
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchoolModelCollection'
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/schools"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "GET"
        type: "http"
  /api/v1/schools/{schoolId}:
    parameters:
      - in: path
        name: schoolId
        schema:
          type: string
          format: uuid
        required: true
        description: The id of the desired school
    options:
      tags:
        - school
      responses:
        200:
          description: Success
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    get:
      summary: Get a school
      description: Get a particular school by its id
      tags:
        - school
      operationId: getSchool
      responses:
        "200":
          description: The school was found
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
        "400":
          description: The school could not be found
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/schools/{schoolId}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.path.schoolId: "method.request.path.schoolId"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "GET"
        type: "http"
    delete:
      summary: Delete a school
      description: Delete the school with the given id
      tags:
        - school
      operationId: removeSchool
      responses:
        "204":
          description: The school was deleted
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/schools/{schoolId}"
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.path.schoolId: "method.request.path.schoolId"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "DELETE"
        type: "http"
    put:
      summary: Update a school
      description: Update the school with the given id
      tags:
        - school
      operationId: updateSchool
      parameters:
        - in: path
          name: schoolId
          schema:
            type: string
            format: uuid
          required: true
          description: The id of the desired school
      requestBody:
        description: The updated school
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchoolModel'
      responses:
        "200":
          description: The school was updated
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchoolModel'
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/schools/{schoolId}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.path.schoolId: "method.request.path.schoolId"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "PUT"
        type: "http"

  # School - Teachers
  /api/v1/schools/{schoolId}/teachers:
    parameters:
      - in: path
        name: schoolId
        schema:
          type: string
          format: uuid
        required: true
        description: The id of the desired school
    options:
      tags:
        - school
        - teacher
      responses:
        200:
          description: Success
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    post:
      summary: Create a teacher
      description: Create a new teacher for a school
      tags:
        - school
        - teacher
      operationId: createTeacher
      requestBody:
        description: The new teacher
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeacherModel'
      responses:
        "201":
          description: The teacher is created
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherResultModel'
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/schools/{schoolId}/teachers"
        responses:
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.schoolId: "method.request.path.schoolId"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "POST"
        type: "http"
    get:
      summary: Get a school
      description: Get a particular school by its id
      tags:
        - school
        - teacher
      operationId: getTeachers
      responses:
        "200":
          description: All teachers for a school
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherResultModelCollection'
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/schools/{schoolId}/teachers"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.schoolId: "method.request.path.schoolId"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "GET"
        type: "http"
  /api/v1/schools/{schoolId}/teachers/{teacherId}:
    parameters:
      - in: path
        name: schoolId
        schema:
          type: string
          format: uuid
        required: true
        description: The id of the desired school
      - in: path
        name: teacherId
        schema:
          type: string
          format: uuid
        required: true
        description: The id of the desired teacher
    options:
      tags:
        - school
        - teacher
      responses:
        200:
          description: Success
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    delete:
      summary: Deactivate a teacher
      description: Deactivate a particular teacher for a particular school
      tags:
        - school
        - teacher
      operationId: deactivateTeacher
      responses:
        "204":
          description: The teacher has been deactivated
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/schools/{schoolId}/teachers/{teacherId}"
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.path.schoolId: "method.request.path.schoolId"
          integration.request.path.teacherId: "method.request.path.teacherId"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "DELETE"
        type: "http"

components:
  links:
    school:
      operationId: getSchool
      parameters:
        schoolId: '$request.path.schoolId'
      description: >
        The `School` object can be retrieved by doing a `GET`
        the the school endpoint using the `schoolId` from current call.
  schemas:
    Empty:
      type: object
    AddressModel:
      type: object
      properties:
        street1:
          type: string
          maxLength: 50
          example: 10818 NE 117th Ave
        street2:
          type: string
          maxLength: 50
        city:
          type: string
          maxLength: 50
          example: Vancouver
        state:
          type: string
          maxLength: 2
          example: WA
        zip:
          type: string
          maxLength: 9
          example: 98662
    UrlArray:
      type: array
      items:
        type: object
        properties:
          href:
            type: string
            format: url
    SelfLink:
      type: object
      properties:
        self:
          allOf:
            - $ref: '#/components/schemas/UrlArray'
    SchoolLink:
      type: object
      properties:
        school:
          allOf:
            - $ref: '#/components/schemas/UrlArray'
    TeachersLink:
      type: object
      properties:
        teachers:
          allOf:
            - $ref: '#/components/schemas/UrlArray'
    ProgramAdminsLink:
      type: object
      properties:
        programAdmins:
          allOf:
            - $ref: '#/components/schemas/UrlArray'
    PersonModel:
      required:
        - firstName
        - lastName
      type: object
      properties:
        firstName:
          type: string
          maxLength: 50
          example: Fred
        lastName:
          type: string
          maxLength: 50
          example: Rogers
        email:
          type: string
          format: email
          maxLength: 50
          example: fred@rogers.com
        workPhone:
          type: string
          format: phone
          maxLength: 10
          example: 3605551212
        cellPhone:
          type: string
          format: phone
          maxLength: 10
          example: 3605551212
    PersonResultModel:
      type: object
      allOf:
        - $ref: '#/components/schemas/PersonModel'
      properties:
        id:
          type: string
          format: uuid
          example: 734aa3e8-52e4-488b-8922-09d8eb803ad8
        _links:
          type: object
          allOf:
            - $ref: '#/components/schemas/SelfLink'
    PersonnelModel:
      required:
        - type
        - firstName
        - lastName
      type: object
      allOf:
        - $ref: '#/components/schemas/PersonModel'
      properties:
        type:
          type: string
          enum: [SOCIAL_WORKER, PRINCIPAL, COUNSELOR, STAFF]
    PersonnelResultModel:
      type: object
      allOf:
        - $ref: '#/components/schemas/PersonnelModel'
      properties:
        _links:
          type: object
          allOf:
            - $ref: '#/components/schemas/SelfLink'
            - $ref: '#/components/schemas/SchoolLink'
    PersonnelCollection:
      properties:
        embedded:
          type: object
          properties:
            personnelModelList:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/PersonResultModel'
    ProgramAdminModel:
      required:
        - firstName
        - lastName
      type: object
      allOf:
        - $ref: '#/components/schemas/PersonModel'
    ProgramAdminModelCollection:
      properties:
        embedded:
          type: object
          properties:
            programAdminModelList:
              type: array
              items:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ProgramAdminModel'
                properties:
                  _links:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/SelfLink'
                      - $ref: '#/components/schemas/SchoolLink'
    SchoolModel:
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
          example: 734aa3e8-52e4-488b-8922-09d8eb803ad8
        name:
          type: string
          maxLength: 50
          example: Cornerstone Christian Acadamy
        address:
          type: object
          allOf:
            - $ref: '#/components/schemas/AddressModel'
        phone:
          type: string
          maxLength: 10
          example: 3602569715
        district:
          type: string
          maxLength: 50
          example: Vancouver
        isPrivate:
          type: boolean
          example: true
    SchoolModelCollection:
      properties:
        embedded:
          type: object
          properties:
            schoolModelList:
              type: array
              items:
                type: object
                allOf:
                  - $ref: '#/components/schemas/SchoolModel'
                properties:
                  _links:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/SelfLink'
                      - $ref: '#/components/schemas/TeachersLink'
                      - $ref: '#/components/schemas/ProgramAdminsLink'
    TeacherModel:
      required:
        - firstName
        - lastName
      type: object
      allOf:
        - $ref: '#/components/schemas/PersonModel'
      properties:
        grade1:
          type: integer
        grade2:
          type: integer
    TeacherResultModel:
      type: object
      allOf:
        - $ref: '#/components/schemas/TeacherModel'
      properties:
        _links:
          type: object
          allOf:
            - $ref: '#/components/schemas/SelfLink'
            - $ref: '#/components/schemas/SchoolLink'
    TeacherResultModelCollection:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            teacherModelList:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/TeacherResultModel'