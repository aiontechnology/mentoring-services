# Copyright 2020 Aion Technology LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

openapi: 3.0.1
info:
  title: Mentor Success API
  description: API for the Mentor Success application
  contact:
    email: whitney@aiontechnology.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: "1.0.0"

servers:
  - url: "https://ve17iw2h0g.execute-api.us-west-2.amazonaws.com/{basePath}"
    variables:
      basePath:
        default: "/test"

tags:
  - name: person
    description: Person Management
  - name: personnel
    description: School Personnel Management
  - name: program-admin
    description: School Program Admin Management
  - name: resource
    description: Resource Management
  - name: school
    description: School Management
  - name: teacher
    description: Teacher Management

# ==================================================================================
# Path definitions
# ==================================================================================

paths:

  # /api/v1/books ------------------------------------------------------------------
  /api/v1/books:

    # OPTIONS for /api/v1/books
    options:
      tags:
        - resource
      responses:
        200:
          description: Success
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"

    # POST for /api/v1/books
    post:
      summary: Add a book
      description: Add a book to the system
      tags:
        - resource
      operationId: createBook
      requestBody:
        description: Book to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookModel'
      responses:
        201:
          description: The book was created
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResultModel'
          links:
            self:
              operationId: getBook
              parameters:
                personId: '$response.body#/id'
              description: >
                The `id` value returned in the response can be used as the
                `bookId` parameter in `GET /books/{bookId}`.
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/books"
        responses:
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "POST"
        type: "http"

    # GET for /api/v1/books
    get:
      summary: Get all books
      description: Get a collection of all books
      tags:
        - resource
      operationId: getAllBooks
      responses:
        "200":
          description: A collection of all books
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResultModelCollection'
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/books"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "GET"
        type: "http"

  # /api/v1/books/{bookId} ---------------------------------------------------------
  /api/v1/books/{bookId}:
    parameters:
      - in: path
        name: bookId
        schema:
          type: string
          format: uuid
        required: true
        description: The id of the desired book

    # OPTIONS for /api/v1/books/{bookId}
    options:
      tags:
        - resource
      responses:
        200:
          description: Success
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"

    # GET for /api/v1/books/{bookId}
    get:
      summary: Get a book
      description: Get a book by id
      tags:
        - resource
      operationId: getBook
      responses:
        "200":
          description: Found the requested book
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/books"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.path.bookId: "method.request.path.bookId"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "GET"
        type: "http"

    # PUT for /api/v1/books/{bookId}
    put:
      summary: Update a book
      description: Update the book with the given id
      tags:
        - resource
      operationId: updateBook
      requestBody:
        description: The updated book
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookModel'
      responses:
        "200":
          description: The book was updated
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResultModel'
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/books/{bookId}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.path.bookId: "method.request.path.bookId"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "PUT"
        type: "http"

    # DELETE for /api/v1/books/{bookId}
    delete:
      summary: Disable book
      description: Disable a book record
      tags:
        - resource
      operationId: deactivateBook
      responses:
        "204":
          description: The book record was deactivated
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/books/{bookId}"
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.path.bookId: "method.request.path.bookId"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "DELETE"
        type: "http"

  # /api/v1/games ------------------------------------------------------------------
  /api/v1/games:

    # OPTIONS for /api/v1/games
    options:
      tags:
        - resource
      responses:
        200:
          description: Success
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"

    # POST for /api/v1/games
    post:
      summary: Add a game
      description: Add a game to the system
      tags:
        - resource
      operationId: createGame
      requestBody:
        description: Game to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameModel'
      responses:
        201:
          description: The game was created
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameResultModel'
          links:
            self:
              operationId: getGame
              parameters:
                personId: '$response.body#/id'
              description: >
                The `id` value returned in the response can be used as the
                `gameId` parameter in `GET /games/{gameId}`.
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/games"
        responses:
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "POST"
        type: "http"

    # GET for /api/v1/games
    get:
      summary: Get all games
      description: Get a collection of all games
      tags:
        - resource
      operationId: getAllGames
      responses:
        "200":
          description: A collection of all games
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameResultModelCollection'
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/games"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "GET"
        type: "http"

  # /api/v1/games/{gameId} ---------------------------------------------------------
  /api/v1/games/{gameId}:
    parameters:
      - in: path
        name: gameId
        schema:
          type: string
          format: uuid
        required: true
        description: The id of the desired game

    # OPTIONS for /api/v1/games/{gameId}
    options:
      tags:
        - resource
      responses:
        200:
          description: Success
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"

    # GET for /api/v1/games/{gameId}
    get:
      summary: Get a game
      description: Get a game by id
      tags:
        - resource
      operationId: getGame
      responses:
        "200":
          description: Found the requested game
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/games"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.path.gameId: "method.request.path.gameId"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "GET"
        type: "http"

    # PUT for /api/v1/games/{gameId}
    put:
      summary: Update a game
      description: Update the game with the given id
      tags:
        - resource
      operationId: updateGame
      requestBody:
        description: The updated game
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameModel'
      responses:
        "200":
          description: The game was updated
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameResultModel'
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/games/{gameId}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.path.gameId: "method.request.path.gameId"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "PUT"
        type: "http"

    # DELETE for /api/v1/games/{gameId}
    delete:
      summary: Disable game
      description: Disable a game record
      tags:
        - resource
      operationId: deactivateGame
      responses:
        "204":
          description: The book record was deactivated
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/games/{gameId}"
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.path.gameId: "method.request.path.gameId"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "DELETE"
        type: "http"

  # /api/v1/interests --------------------------------------------------------------
  /api/v1/interests:

    # OPTIONS for /api/v1/interests
    options:
      tags:
        - resource
      responses:
        200:
          description: Success
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"

    # GET for /api/v1/interests
    get:
      summary: Get interests
      description: Get all interests
      tags:
        - resource
      operationId: getInterests
      responses:
        "200":
          description: Returned all interests
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterestModelCollection'
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/interests"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "GET"
        type: "http"

  # /api/v1/leadership_skills ------------------------------------------------------
  /api/v1/leadership_skills:

    # OPTIONS for /api/v1/leadership_skills
    options:
      tags:
        - resource
      responses:
        200:
          description: Success
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"

    # GET for /api/v1/leadership_skills
    get:
      summary: Get leadership skills
      description: Get all leadership skills
      tags:
        - resource
      operationId: getLeaderhipSkills
      responses:
        "200":
          description: Returned all leadership skills
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadershipSkillModelCollection'
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/leadership_skills"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "GET"
        type: "http"

  # /api/v1/leadership_traits ------------------------------------------------------
  /api/v1/leadership_traits:

    # OPTIONS for /api/v1/leadership_traits
    options:
      tags:
        - resource
      responses:
        200:
          description: Success
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"

    # GET for /api/v1/leadership_traits
    get:
      summary: Get leadership traits
      description: Get all leadership traits
      tags:
        - resource
      operationId: getLeadershipTraits
      responses:
        "200":
          description: Returned all leadership traits
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadershipTraitModelCollection'
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/leadership_traits"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "GET"
        type: "http"

  # /api/v1/people -----------------------------------------------------------------
  /api/v1/people:

    # OPTIONS for /api/v1/people
    options:
      tags:
        - person
      responses:
        200:
          description: Success
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"

    # POST for /api/v1/people
    post:
      summary: Add a person
      description: Add a person to the system
      tags:
        - person
      operationId: createPerson
      requestBody:
        description: Person to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonModel'
      responses:
        201:
          description: The person was created
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonResultModel'
          links:
            self:
              operationId: getPerson
              parameters:
                personId: '$response.body#/id'
              description: >
                The `id` value returned in the response can be used as the
                `personId` parameter in `GET /people/{personId}`.
        400:
          description: There was an error while creating the person
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestModel'
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/people"
        responses:
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "POST"
        type: "http"

  #  /api/v1/people/{personId} -----------------------------------------------------
  /api/v1/people/{personId}:
    parameters:
      - in: path
        name: personId
        schema:
          type: string
          format: uuid
        required: true
        description: The id of the desired person

    # OPTIONS for /api/v1/people/{personId}
    options:
      tags:
        - person
      responses:
        200:
          description: Success
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"

    # GET for /api/v1/people/{personId}
    get:
      summary: Get a person
      description: Get a person by id
      tags:
        - person
      operationId: getPerson
      responses:
        200:
          description: Found the requested person
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonResultModel'
        404:
          description: Unable to find the requested person
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/people"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "GET"
        type: "http"

  # /api/v1/schools/{schoolId}/personnel -------------------------------------------
  /api/v1/schools/{schoolId}/personnel:
    parameters:
      - in: path
        name: schoolId
        schema:
          type: string
          format: uuid
        required: true
        description: The id of the desired school

    # OPTIONS for /api/v1/schools/{schoolId}/personnel
    options:
      tags:
        - personnel
        - school
      responses:
        200:
          description: Success
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"

    # POST for /api/v1/schools/{schoolId}/personnel
    post:
      summary: Add personnel
      description: Add personnel to a school
      tags:
        - personnel
        - school
      operationId: createPersonnel
      requestBody:
        description: Personnel to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonnelModel'
      responses:
        201:
          description: The personnel was created
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonnelResultModel'
          links:
            self:
              operationId: getPersonnel
              parameters:
                personnelId: '$response.body/#id'
              description: >
                The `id` value returned in the response can be used as the
                `personnelId` parameter in `GET /personnel/{personnelId}
            school:
              operationId: getSchool
        400:
          description: There was an error while creating the personnel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestModel'
        404:
          description: The Requested school was not found
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/schools/{schoolId}/personnel"
        responses:
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.path.schoolId: "method.request.path.schoolId"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "POST"
        type: "http"

    # GET for /api/v1/schools/{schoolId}/personnel
    get:
      summary: Get all personnel
      description: Get all personnel for a school (not including teachers)
      tags:
        - personnel
        - school
      operationId: getAllPersonnel
      responses:
        "200":
          description: A collection of personnel for the school
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonnelResultModelCollection'
        "400":
          description: The Requested school was not found
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/schools/{schoolId}/personnel"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.path.schoolId: "method.request.path.schoolId"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "GET"
        type: "http"

  # /api/v1/schools/{schoolId}/personnel/{personnelId} -----------------------------
  /api/v1/schools/{schoolId}/personnel/{personnelId}:
    parameters:
      - in: path
        name: schoolId
        schema:
          type: string
          format: uuid
        required: true
        description: The id of the desired school
      - in: path
        name: personnelId
        schema:
          type: string
          format: uuid
        required: true
        description: The id of the desired personnel

    # OPTIONS for /api/v1/schools/{schoolId}/personnel/{personnelId}
    options:
      tags:
        - personnel
        - school
      responses:
        200:
          description: Success
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"

    # GET for /api/v1/schools/{schoolId}/personnel/{personnelId}
    get:
      summary: Get a personnel
      description: Get a particular personnel by id
      tags:
        - personnel
        - school
      operationId: getPersonnel
      responses:
        "200":
          description: The personnel was returned
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonnelResultModel'
          links:
            self:
              operationId: getPersonnel
              parameters:
                schoolId: '$request.path.schoolId'
                personnelId: '$request.path.personnelId'
              description: >
                The `Personnel` object can be retrieved by doing a `GET`
                to the current URL
            school:
              $ref: '#/components/links/school'
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/schools/{schoolId}/personnel/{personnelId}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.path.schoolId: "method.request.path.schoolId"
          integration.request.path.personnelId: "method.request.path.personnelId"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "GET"
        type: "http"

    # DELETE for /api/v1/schools/{schoolId}/personnel/{personnelId}
    delete:
      summary: Disable personnel
      description: Disable a personnel record
      tags:
        - personnel
        - school
      operationId: deactivatePersonnel
      responses:
        "204":
          description: The personnel record was deleted
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/schools/{schoolId}/personnel/{personnelId}"
        responses:
          default:
            statusCode: "204"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.path.schoolId: "method.request.path.schoolId"
          integration.request.path.personnelId: "method.request.path.personnelId"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "DELETE"
        type: "http"

  # /api/v1/schools/{schoolId}/programAdmins ---------------------------------------
  /api/v1/schools/{schoolId}/programAdmins:
    parameters:
      - in: path
        name: schoolId
        schema:
          type: string
          format: uuid
        required: true
        description: The id of the desired school

    # OPTIONS for /api/v1/schools/{schoolId}/programAdmins
    options:
      tags:
        - program-admin
        - school
      responses:
        200:
          description: Success
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"

    # POST for /api/v1/schools/{schoolId}/programAdmins
    post:
      summary: Add a program administrator
      description: Add a new program administrator
      tags:
        - program-admin
        - school
      operationId: createProgramAdmin
      responses:
        "201":
          description: The program administrator was created
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramAdminResultModel'
        "400":
          description: The Requested school was not found
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/schools/{schoolId}/programAdmins"
        responses:
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.path.schoolId: "method.request.path.schoolId"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "POST"
        type: "http"

    # GET for /api/v1/schools/{schoolId}/programAdmins
    get:
      summary: Get all program admins
      description: Get an array of all program admins for a school
      tags:
        - program-admin
        - school
      operationId: getProgramAdmins
      responses:
        "200":
          description: A collection of program administrators for a school
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramAdminResultModelCollection'
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/schools/{schoolId}/programAdmins"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.path.schoolId: "method.request.path.schoolId"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "GET"
        type: "http"

  # /api/v1/schools ----------------------------------------------------------------
  /api/v1/schools:

    # OPTIONS for /api/v1/schools
    options:
      tags:
        - school
      responses:
        200:
          description: Success
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"

    # POST for /api/v1/schools
    post:
      summary: Create a new school
      description: Create a new school within the system
      tags:
        - school
      operationId: createSchool
      responses:
        "201":
          description: A new school was created
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchoolResultModel'
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/schools"
        responses:
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "POST"
        type: "http"

    # GET for /api/v1/schools
    get:
      summary: Get all schools
      description: Get a collection of all schools
      tags:
        - school
      operationId: getAllSchools
      responses:
        "200":
          description: A collection of all schools
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchoolResultModelCollection'
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/schools"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "GET"
        type: "http"

  # /api/v1/schools/{schoolId} -----------------------------------------------------
  /api/v1/schools/{schoolId}:
    parameters:
      - in: path
        name: schoolId
        schema:
          type: string
          format: uuid
        required: true
        description: The id of the desired school

    # OPTIONS for /api/v1/schools/{schoolId}
    options:
      tags:
        - school
      responses:
        200:
          description: Success
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"

    # GET for /api/v1/schools/{schoolId}
    get:
      summary: Get a school
      description: Get a particular school by its id
      tags:
        - school
      operationId: getSchool
      responses:
        "200":
          description: The school was found
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
        "400":
          description: The school could not be found
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/schools/{schoolId}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.path.schoolId: "method.request.path.schoolId"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "GET"
        type: "http"

    # DELETE for /api/v1/schools/{schoolId}
    delete:
      summary: Delete a school
      description: Delete the school with the given id
      tags:
        - school
      operationId: removeSchool
      responses:
        "204":
          description: The school was deleted
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/schools/{schoolId}"
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.path.schoolId: "method.request.path.schoolId"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "DELETE"
        type: "http"

    # PUT for /api/v1/schools/{schoolId}
    put:
      summary: Update a school
      description: Update the school with the given id
      tags:
        - school
      operationId: updateSchool
      parameters:
        - in: path
          name: schoolId
          schema:
            type: string
            format: uuid
          required: true
          description: The id of the desired school
      requestBody:
        description: The updated school
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchoolModel'
      responses:
        "200":
          description: The school was updated
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchoolModel'
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/schools/{schoolId}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.path.schoolId: "method.request.path.schoolId"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "PUT"
        type: "http"

  # /api/v1/schools/{schoolId}/teachers --------------------------------------------
  /api/v1/schools/{schoolId}/teachers:
    parameters:
      - in: path
        name: schoolId
        schema:
          type: string
          format: uuid
        required: true
        description: The id of the desired school

    # OPTIONS for /api/v1/schools/{schoolId}/teachers
    options:
      tags:
        - school
        - teacher
      responses:
        200:
          description: Success
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"

    # POST for /api/v1/schools/{schoolId}/teachers
    post:
      summary: Create a teacher
      description: Create a new teacher for a school
      tags:
        - school
        - teacher
      operationId: createTeacher
      requestBody:
        description: The new teacher
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeacherResultModel'
      responses:
        "201":
          description: The teacher is created
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherResultModel'
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/schools/{schoolId}/teachers"
        responses:
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.path.schoolId: "method.request.path.schoolId"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "POST"
        type: "http"

    # GET for /api/v1/schools/{schoolId}/teachers
    get:
      summary: Get a school
      description: Get a particular school by its id
      tags:
        - school
        - teacher
      operationId: getTeachers
      responses:
        "200":
          description: All teachers for a school
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherResultModelCollection'
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/schools/{schoolId}/teachers"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.path.schoolId: "method.request.path.schoolId"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "GET"
        type: "http"

  # /api/v1/schools/{schoolId}/teachers/{teacherId} --------------------------------
  /api/v1/schools/{schoolId}/teachers/{teacherId}:
    parameters:
      - in: path
        name: schoolId
        schema:
          type: string
          format: uuid
        required: true
        description: The id of the desired school
      - in: path
        name: teacherId
        schema:
          type: string
          format: uuid
        required: true
        description: The id of the desired teacher

    # OPTIONS for /api/v1/schools/{schoolId}/teachers/{teacherId}
    options:
      tags:
        - school
        - teacher
      responses:
        200:
          description: Success
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"

    # DELETE for /api/v1/schools/{schoolId}/teachers/{teacherId}
    delete:
      summary: Deactivate a teacher
      description: Deactivate a particular teacher for a particular school
      tags:
        - school
        - teacher
      operationId: deactivateTeacher
      responses:
        "204":
          description: The teacher has been deactivated
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        uri: "http://mentorsuccess-lb-9e89d6a5dc0a9dd9.elb.us-west-2.amazonaws.com/api/v1/schools/{schoolId}/teachers/{teacherId}"
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.X-Forwarded-Proto: "'https'"
          integration.request.path.schoolId: "method.request.path.schoolId"
          integration.request.path.teacherId: "method.request.path.teacherId"
          integration.request.header.X-Forwarded-Host: "'ve17iw2h0g.execute-api.us-west-2.amazonaws.com/test'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "pmo7ds"
        httpMethod: "DELETE"
        type: "http"

# ==================================================================================
# Schema definitions
# ==================================================================================

components:
  links:
    school:
      operationId: getSchool
      parameters:
        schoolId: '$request.path.schoolId'
      description: >
        The `School` object can be retrieved by doing a `GET`
        the the school endpoint using the `schoolId` from current call.
  schemas:

    # AddressModel -----------------------------------------------------------------
    AddressModel:
      type: object
      properties:
        street1:
          type: string
          maxLength: 50
          example: 10818 NE 117th Ave
        street2:
          type: string
          maxLength: 50
        city:
          type: string
          maxLength: 50
          example: Vancouver
        state:
          type: string
          maxLength: 2
          example: WA
        zip:
          type: string
          maxLength: 9
          example: 98662

    # BadRequestModel --------------------------------------------------------------
    BadRequestModel:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: string
        error:
          type: object
        message:
          type: string
        path:
          type: string

    # BookModel --------------------------------------------------------------------
    BookModel:
      required:
        - author
        - title
        - gradeLevel
      type: object
      properties:
        author:
          type: string
          maxLength: 40
          example: J. R. R. Tolkien
        title:
          type: string
          maxLength: 30
          example: The Fellowship of the Ring
        gradeLevel:
          type: integer
          example: 3
        interests:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/NameModel'
        leadershipSkills:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/NameModel'
        leaderTraits:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/NameModel'

    # BookResultModel --------------------------------------------------------------
    BookResultModel:
      type: object
      allOf:
        - $ref: '#/components/schemas/BookModel'
      properties:
        _links:
          type: object
          allOf:
            - $ref: '#/components/schemas/SelfLink'

    # BookResultModelCollection --------------------------------------------------------
    BookResultModelCollection:
      properties:
        embedded:
          type: object
          properties:
            bookModelList:
              type: array
              items:
                type: object
                allOf:
                  - $ref: '#/components/schemas/BookResultModel'

    # Empty ------------------------------------------------------------------------
    Empty:
      type: object

    # GameModel --------------------------------------------------------------------
    GameModel:
      required:
        - name
        - gradeLevel
      type: object
      properties:
        name:
          type: string
          maxLength: 40
          example: Monopoly
        description:
          type: string
          maxLength: 50
          example: Buy all the property
        gradeLevel:
          type: integer
          example: 3
        interests:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/NameModel'
        leadershipSkills:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/NameModel'
        leaderTraits:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/NameModel'

    # GameResultModel --------------------------------------------------------------
    GameResultModel:
      type: object
      allOf:
        - $ref: '#/components/schemas/GameModel'
      properties:
        _links:
          type: object
          allOf:
            - $ref: '#/components/schemas/SelfLink'

    # GameResultModelCollection --------------------------------------------------------
    GameResultModelCollection:
      properties:
        embedded:
          type: object
          properties:
            bookModelList:
              type: array
              items:
                type: object
                allOf:
                  - $ref: '#/components/schemas/GameResultModel'

    # InterestModelCollection ------------------------------------------------------
    InterestModelCollection:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            interestTraitModelList:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/NameModel'

    # LeadershipSkillModelCollection -----------------------------------------------
    LeadershipSkillModelCollection:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            leadershipSkillModelList:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/NameModel'

    # LeadershipTraitModelCollection -----------------------------------------------
    LeadershipTraitModelCollection:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            leadershipTraitModelList:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/NameModel'

    # NameModel --------------------------------------------------------------------
    NameModel:
      required:
        - name
      type: object
      properties:
        name:
          type: string

    # PersonModel ------------------------------------------------------------------
    PersonModel:
      required:
        - firstName
        - lastName
      type: object
      properties:
        firstName:
          type: string
          maxLength: 50
          example: Fred
        lastName:
          type: string
          maxLength: 50
          example: Rogers
        email:
          type: string
          format: email
          maxLength: 50
          example: fred@rogers.com
        workPhone:
          type: string
          format: phone
          maxLength: 10
          example: 3605551212
        cellPhone:
          type: string
          format: phone
          maxLength: 10
          example: 3605551212

    # PersonnelModel ---------------------------------------------------------------
    PersonnelModel:
      required:
        - type
        - firstName
        - lastName
      type: object
      allOf:
        - $ref: '#/components/schemas/PersonModel'
      properties:
        type:
          type: string
          enum: [SOCIAL_WORKER, PRINCIPAL, COUNSELOR, STAFF]

    # PersonnelResultModel ---------------------------------------------------------
    PersonnelResultModel:
      type: object
      allOf:
        - $ref: '#/components/schemas/PersonnelModel'
      properties:
        _links:
          type: object
          allOf:
            - $ref: '#/components/schemas/SelfLink'
            - $ref: '#/components/schemas/SchoolLink'

    # PersonnelResultModelCollection -----------------------------------------------
    PersonnelResultModelCollection:
      properties:
        embedded:
          type: object
          properties:
            personnelModelList:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/PersonResultModel'

    # PersonResultModel ------------------------------------------------------------
    PersonResultModel:
      type: object
      allOf:
        - $ref: '#/components/schemas/PersonModel'
      properties:
        id:
          type: string
          format: uuid
          example: 734aa3e8-52e4-488b-8922-09d8eb803ad8
        _links:
          type: object
          allOf:
            - $ref: '#/components/schemas/SelfLink'

    # ProgramAdminModel ------------------------------------------------------------
    ProgramAdminModel:
      required:
        - firstName
        - lastName
      type: object
      allOf:
        - $ref: '#/components/schemas/PersonModel'

    # ProgramAdminResultModel ------------------------------------------------------
    ProgramAdminResultModel:
      type: object
      allOf:
        - $ref: '#/components/schemas/ProgramAdminModel'
      properties:
        _links:
          type: object
          allOf:
            - $ref: '#/components/schemas/SelfLink'
            - $ref: '#/components/schemas/SchoolLink'

    # ProgramAdminResultModelCollection --------------------------------------------------
    ProgramAdminResultModelCollection:
      properties:
        embedded:
          type: object
          properties:
            programAdminModelList:
              type: array
              items:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ProgramAdminResultModel'

    # ProgramAdminsLink ------------------------------------------------------------
    ProgramAdminsLink:
      type: object
      properties:
        programAdmins:
          allOf:
            - $ref: '#/components/schemas/UrlArray'

    # ResourceResultModelCollection -----------------------------------------------
    ResourceResultModelCollection:
      properties:
        embedded:
          type: object
          properties:
            bookModelList:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/BookResultModel'
            gameModelList:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/GameResultModel'

    # SchoolLink -------------------------------------------------------------------
    SchoolLink:
      type: object
      properties:
        school:
          allOf:
            - $ref: '#/components/schemas/UrlArray'

    # SchoolModel ------------------------------------------------------------------
    SchoolModel:
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
          example: 734aa3e8-52e4-488b-8922-09d8eb803ad8
        name:
          type: string
          maxLength: 50
          example: Cornerstone Christian Acadamy
        address:
          type: object
          allOf:
            - $ref: '#/components/schemas/AddressModel'
        phone:
          type: string
          maxLength: 10
          example: 3602569715
        district:
          type: string
          maxLength: 50
          example: Vancouver
        isPrivate:
          type: boolean
          example: true

    # SchoolResultModel ------------------------------------------------------------
    SchoolResultModel:
      type: object
      allOf:
        - $ref: '#/components/schemas/SchoolModel'
      properties:
        _links:
          type: object
          allOf:
            - $ref: '#/components/schemas/SelfLink'
            - $ref: '#/components/schemas/TeachersLink'
            - $ref: '#/components/schemas/ProgramAdminsLink'

    # SchoolResultModelCollection --------------------------------------------------------
    SchoolResultModelCollection:
      properties:
        embedded:
          type: object
          properties:
            schoolModelList:
              type: array
              items:
                type: object
                allOf:
                  - $ref: '#/components/schemas/SchoolResultModel'

    # SelfLink ---------------------------------------------------------------------
    SelfLink:
      type: object
      properties:
        self:
          allOf:
            - $ref: '#/components/schemas/UrlArray'

    # TeacherModel -----------------------------------------------------------------
    TeacherModel:
      required:
        - firstName
        - lastName
      type: object
      allOf:
        - $ref: '#/components/schemas/PersonModel'
      properties:
        grade1:
          type: integer
        grade2:
          type: integer

    # TeacherResultModel -----------------------------------------------------------
    TeacherResultModel:
      type: object
      allOf:
        - $ref: '#/components/schemas/TeacherModel'
      properties:
        _links:
          type: object
          allOf:
            - $ref: '#/components/schemas/SelfLink'
            - $ref: '#/components/schemas/SchoolLink'

    # TeacherResultModelCollection -------------------------------------------------
    TeacherResultModelCollection:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            teacherModelList:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/TeacherResultModel'

    # TeachersLink -----------------------------------------------------------------
    TeachersLink:
      type: object
      properties:
        teachers:
          allOf:
            - $ref: '#/components/schemas/UrlArray'

    # UrlArray ---------------------------------------------------------------------
    UrlArray:
      type: array
      items:
        type: object
        properties:
          href:
            type: string
            format: url
